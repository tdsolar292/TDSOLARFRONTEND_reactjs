import React, { useState, useEffect } from 'react';
import { Modal, Button, Form } from 'react-bootstrap';
import config from '../../config';
import './CommercialPerforma.css';

const dummyData = {
  Id: '',
  ProposalDate: '2025-05-22',
  ProposalRefNumber: 'Sc1001',
  ProformaInvoiceNumber: 'PI/Sc1001/10001',
  Name: 'THE EMD ENTERPRISE',
  Mobile: '96857432145',
  Email: 'emd.developer@gmail.com',
  Address: '26 Elliot Lane , Kolkata 700014',
  PhaseGridType: '3 Phase On Grid',
  PVModuleRating: '540',
  ItemName_1: 'PHOTOVLTAIC (PV) DC POWER MONO-PERC',
  HSNSAC_1: '85017200',
  Quantity_1: '10',
  Unit_1: 'Nos',
  UnitPrice_1: '500',
  GSTPercentage_1: '12',
  ItemName_2: 'UTL 60Kwp 3PHESE ON GRID INVETER',
  HSNSAC_2: '85017200',
  Quantity_2: '10',
  Unit_2: 'Nos',
  UnitPrice_2: '600',
  GSTPercentage_2: '18',
  ItemName_3: 'WALKWAY PVC ,AC-DC AND LA  EARTHING,ZED 3PH,MC4 CONNECTOR,ACDB DCDB,SOLAR DC CABLE,AC CABLE,3PH BUSBAR, MCB, LIGHTENING ARRESTOR, OTHER ACCESSORISE WITH INSTALLATION AND COMMISIONING(including  transport)',
  HSNSAC_3: '',
  Quantity_3: '1',
  Unit_3: 'No',
  UnitPrice_3: '5000',
  GSTPercentage_3: '18',
  GeneratedBy: 'Software-Admin'
};

const PV_MODULE_OPTIONS = ['540', '550', '560', '580', 'others'];
const GST_OPTIONS = ['0', '5', '12', '18', '28'];
const UNIT_OPTIONS = ['Nos', 'No', 'Set', 'Unit', 'EA'];
const GENERATED_BY_OPTIONS = ['Dwipayan','Sourav', 'Software-Admin', 'User'];

const fieldConfigs = [
  { name: 'Id', label: 'Customer ID', type: 'text', display: false },
  { name: 'ProposalDate', label: 'Proposal Date', type: 'date', display: true },
  { name: 'ProposalRefNumber', label: 'Proposal Reference Number', type: 'text', display: true },
  { name: 'ProformaInvoiceNumber', label: 'Proforma Invoice Number', type: 'text', display: true },
  { name: 'Name', label: 'Customer Name', type: 'text', display: true },
  { name: 'Mobile', label: 'Mobile Number', type: 'text', display: true },
  { name: 'Email', label: 'Email Address', type: 'email', display: true },
  { name: 'Address', label: 'Address', type: 'text', display: true },
  { name: 'PhaseGridType', label: 'Phase/Grid Type', type: 'text', display: true },
  { name: 'PVModuleRating', label: 'PV Module Rating', type: 'dropdown', options: PV_MODULE_OPTIONS, display: true },
  { name: 'ItemName_1', label: 'Item Name 1', type: 'textarea', display: true },
  { name: 'HSNSAC_1', label: 'HSN/SAC Code 1', type: 'text', display: true },
  { name: 'Quantity_1', label: 'Quantity 1', type: 'number', display: true },
  { name: 'Unit_1', label: 'Unit 1', type: 'dropdown', options: UNIT_OPTIONS, display: true },
  { name: 'UnitPrice_1', label: 'Unit Price 1', type: 'number', display: true },
  { name: 'GSTPercentage_1', label: 'GST Percentage 1', type: 'dropdown', options: GST_OPTIONS, display: true },
  { name: 'ItemName_2', label: 'Item Name 2', type: 'textarea', display: true },
  { name: 'HSNSAC_2', label: 'HSN/SAC Code 2', type: 'text', display: true },
  { name: 'Quantity_2', label: 'Quantity 2', type: 'number', display: true },
  { name: 'Unit_2', label: 'Unit 2', type: 'dropdown', options: UNIT_OPTIONS, display: true },
  { name: 'UnitPrice_2', label: 'Unit Price 2', type: 'number', display: true },
  { name: 'GSTPercentage_2', label: 'GST Percentage 2', type: 'dropdown', options: GST_OPTIONS, display: true },
  { name: 'ItemName_3', label: 'Item Name 3', type: 'textarea', display: true },
  { name: 'HSNSAC_3', label: 'HSN/SAC Code 3', type: 'text', display: true },
  { name: 'Quantity_3', label: 'Quantity 3', type: 'number', display: true },
  { name: 'Unit_3', label: 'Unit 3', type: 'dropdown', options: UNIT_OPTIONS, display: true },
  { name: 'UnitPrice_3', label: 'Unit Price 3', type: 'number', display: true },
  { name: 'GSTPercentage_3', label: 'GST Percentage 3', type: 'dropdown', options: GST_OPTIONS, display: true },
  { name: 'GeneratedBy', label: 'Generated By', type: 'dropdown', options: GENERATED_BY_OPTIONS, display: true }
];

const initialFormData = fieldConfigs.reduce((acc, field) => {
  acc[field.name] = '';
  return acc;
}, { PVModuleRating: '' });

const CommercialPerforma = ({ show, handleClose }) => {
  const [formData, setFormData] = useState(initialFormData);
  const [status, setStatus] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [otherPVModule, setOtherPVModule] = useState('');

  useEffect(() => {
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      setFormData({ ...dummyData });
      setOtherPVModule('');
    }
  }, [show]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    if (name === 'PVModuleRating' && value !== 'others') {
      setOtherPVModule('');
    }
  };

  const handleOtherPVModuleChange = (e) => {
    setOtherPVModule(e.target.value);
    setFormData((prev) => ({
      ...prev,
      PVModuleRating: e.target.value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setStatus('');

    try {
      await fetch(config.commercialPerformaInvoice, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
        mode: 'no-cors'
      });
      setStatus('✅ Proforma Invoice submitted successfully!');
      setTimeout(() => {
        resetForm();
        handleClose();
      }, 3000);
    } catch (error) {
      setStatus(`❌ Error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setFormData(initialFormData);
    setOtherPVModule('');
    setStatus('');
  };

  return (
    <Modal show={show} onHide={handleClose} size="xl">
      <Modal.Header closeButton className="bg-success text-white">
        <Modal.Title>Commercial Proforma Invoice Form</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {isLoading && (
          <div className="text-center my-3">
            <div className="spinner-border text-success" role="status">
              <span className="visually-hidden">Loading...</span>
            </div>
          </div>
        )}
        {!isLoading && !status && (
          <Form onSubmit={handleSubmit}>
            <div className="row proforma-row">
              {fieldConfigs.filter(f => f.display).map((field, index) => (
                <div key={index} className="col-md-4 mb-3">
                  <Form.Label htmlFor={field.name}>{field.label}</Form.Label>
                  {field.type === 'textarea' ? (
                    <Form.Control
                      as="textarea"
                      rows={2}
                      id={field.name}
                      name={field.name}
                      value={formData[field.name]}
                      onChange={handleChange}
                      placeholder={`Enter ${field.label}`}
                    />
                  ) : field.type === 'dropdown' ? (
                    <>
                      <Form.Select
                        id={field.name}
                        name={field.name}
                        value={
                          field.name === 'PVModuleRating'
                            ? (formData.PVModuleRating === '' ? '' : (PV_MODULE_OPTIONS.includes(formData.PVModuleRating) ? formData.PVModuleRating : 'others'))
                            : formData[field.name]
                        }
                        onChange={field.name === 'PVModuleRating' ? handleChange : handleChange}
                      >
                        <option value="">Select {field.label}</option>
                        {field.options.map(opt => (
                          <option key={opt} value={opt}>{opt === 'others' ? 'Others' : opt}</option>
                        ))}
                      </Form.Select>
                      {/* Show input if PVModuleRating is 'others' */}
                      {field.name === 'PVModuleRating' && (formData.PVModuleRating === 'others' || (!PV_MODULE_OPTIONS.includes(formData.PVModuleRating) && formData.PVModuleRating !== '')) ? (
                        <Form.Control
                          type="number"
                          min="1"
                          placeholder="Enter PV Module Rating"
                          className="mt-2"
                          value={otherPVModule || (PV_MODULE_OPTIONS.includes(formData.PVModuleRating) ? '' : formData.PVModuleRating)}
                          onChange={handleOtherPVModuleChange}
                        />
                      ) : null}
                    </>
                  ) : (
                    <Form.Control
                      type={field.type}
                      id={field.name}
                      name={field.name}
                      value={formData[field.name]}
                      onChange={handleChange}
                      placeholder={`Enter ${field.label}`}
                    />
                  )}
                </div>
              ))}
            </div>
            <div className="modal-footer">
              <Button type="button" variant="secondary" onClick={resetForm}>
                Clear
              </Button>
              <Button type="submit" variant="success">
                Submit Proforma
              </Button>
            </div>
          </Form>
        )}
        {status && (
          <div className="text-center mt-3">
            <p className={status.startsWith('✅') || status.startsWith('⚠️') ? 'text-success' : 'text-danger'}>
              {status}
            </p>
          </div>
        )}
      </Modal.Body>
    </Modal>
  );
};

export default CommercialPerforma;
